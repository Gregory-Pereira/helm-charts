---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/categories: Image Build
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: image-build
spec:
  description: >-
    Buildah task builds source into a container image and then pushes it to a
    container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string
    - default: >-
        registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: vfs
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string
    - default: "true"
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: oci
      description: "The format of the built container, oci or docker"
      name: FORMAT
      type: string
    - default: ""
      description: Extra parameters passed for the build command when building images.
      name: BUILD_EXTRA_ARGS
      type: string
    - default: ""
      description: Extra parameters passed for the push command when pushing images.
      name: PUSH_EXTRA_ARGS
      type: string
    - name: BASE_IMAGE

  workspaces:
    - name: data
    - name: sslcertdir
      optional: true
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.

  steps:
    - image: $(params.BUILDER_IMAGE)
      name: build
      workingDir: $(workspaces.data.path)
      resources:
        limits:
          cpu: "2"
          memory: "8Gi"
        requests:
          cpu: "1"
          memory: "2Gi"
      script: |
        mkdir -p .tekton_metrics
        touch .tekton_metrics/images
        start=`date +%s`

        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
          --tls-verify=$(params.TLSVERIFY) --no-cache \
          -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)

        end=`date +%s`

        touch .tekton_metrics/image_build_success
        echo "$((end-start))" > .tekton_metrics/image_build_duration
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers

    - name: send-for-build-analysis
      image: quay.io/thoth-station/s2i-thoth-dev:latest
      workingDir: $(workspaces.data.path)
      env:
        - name: base_image
          value: $(params.BASE_IMAGE)
        - name: namespace
          value: $(context.taskRun.namespace)
        - name: image
          value: $(params.IMAGE)
      script: |
        #!/opt/app-root/bin/python
        import requests
        import os
        import time
        import json
        from pathlib import Path

        from thoth.common import OpenShift

        POD_ID = os.getenv("HOSTNAME")
        NAMESPACE = os.getenv("namespace")
        BASE_IMAGE = os.getenv("base_image")
        IMAGE = os.getenv("image")

        OPENSHIFT = OpenShift()
        URL_HOST = OPENSHIFT.openshift_api_url
        URL_TOKEN = OPENSHIFT.token

        STATUS_ENDPOINT = f"{URL_HOST}/api/v1/namespaces/{NAMESPACE}/pods/{POD_ID}"
        LOG_ENDPOINT = f"{URL_HOST}/api/v1/namespaces/{NAMESPACE}/pods/{POD_ID}/log"

        BUILD_PARAMS = {"container": "step-build"}
        GET_HEADERS = {
            "Authorization": "Bearer {}".format(URL_TOKEN),
            "Content-Type": "application/json",
        }

        URL = "https://khemenu.thoth-station.ninja/api/v1/build-analysis"


        def check_build_status():
            response = requests.get(
                STATUS_ENDPOINT, headers=GET_HEADERS, verify=False, params=BUILD_PARAMS,
            )
            context = response.json()
            return next(
                filter(
                    lambda x: x["name"] == "step-build",
                    response.json().get("status", {}).get("containerStatuses", {}),
                ),
                {"state": "running"},
            )


        try:
            Path(".tekton_metrics/image_build_log_analysis").touch()

            if "thoth-station" not in BASE_IMAGE:
                Path(".tekton_metrics/image_build_log_analysis_skipped").touch()
                raise ValueError(
                    f"Base image '{BASE_IMAGE}' is not suitable for analysis."
                )

            while context := check_build_status():
                if "running" in context["state"]:
                    print("Waiting for container step-build, It is still running...")
                    time.sleep(30)
                    continue
                elif "terminated" in context["state"]:
                    print("Build Step is completed.")
                    break
                else:
                    raise ValueError(f"Build step has failed: {context}")

            log_response = requests.get(
                LOG_ENDPOINT, headers=GET_HEADERS, verify=False, params=BUILD_PARAMS,
            )
            response = requests.post(
                URL,
                json={
                    "base_image": BASE_IMAGE,
                    "build_log": {
                        "apiversion": "",
                        "kind": '"BuildLog"\n',
                        "log": json.dumps(log_response.text),
                        "metadata": "string",
                    },
                    "output_image": IMAGE,
                },
            )
            if response.status_code == 202:
                print("Successfully submitted for build analysis.")
                Path(".tekton_metrics/image_build_log_analysis_success").touch()

            else:
                Path(".tekton_metrics/image_build_log_analysis_failure").touch()
                raise ValueError(
                    f"Submit attempt for build analysis has Failed: {response.text}"
                )

        except Exception as e:
            print("Failed to submit for build analysis.")
            print("Status Response:", e)

    - image: $(params.BUILDER_IMAGE)
      name: push
      workingDir: $(workspaces.data.path)
      script: |
        start=`date +%s`

        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(workspaces.data.path)/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)

        end=`date +%s`
        touch .tekton_metrics/image_push_success_total
        echo "$((end-start))" > .tekton_metrics/image_push_duration
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      resources:
        limits:
          cpu: "2"
          memory: "8Gi"
        requests:
          cpu: "1"
          memory: "2Gi"

    - name: send-for-image-analysis
      image: quay.io/thoth-station/s2i-thoth-dev:latest
      workingDir: $(workspaces.data.path)
      env:
        - name: image
          value: $(params.IMAGE)
      script: |
        #!/opt/app-root/bin/python
        import requests
        import os
        from pathlib import Path

        URL = "https://khemenu.thoth-station.ninja/api/v1/analyze?"

        Path(".tekton_metrics/image_analysis").touch()
        params = {
            "image": os.getenv("image"),
            "environment_type": "runtime",
            "verify_tls": True,
        }

        try:
            response = requests.post(
                URL, headers={"Content-type": "application/json"}, params=params,
            )
            if response.status_code == 202:
                Path(".tekton_metrics/image_analysis_success").touch()
                print("Successfully submitted for image analysis.")
            else:
                raise ValueError(response.text)
        except Exception as e:
            Path(".tekton_metrics/image_analysis_failure").touch()
            print("Submit attempt for image analysis has Failed.")
            print("Reason: {}".format(e))

      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers

    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.data.path)
      script: cat image-digest | tee /tekton/results/IMAGE_DIGEST

  volumes:
    - name: varlibcontainers
      emptyDir: {}
