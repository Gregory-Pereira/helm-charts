---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: jupyterbook
spec:
  params:
    - name: url
      type: string
    - name: ref
      type: string
      default: ""
    - name: googleAnalyticsToken
      default: ""
    - name: ownerReferences
      default: "[]"

  results:
    - name: url
      value: "$(tasks.url-to-results.results.results)"

  workspaces:
    - name: data

  tasks:
    - name: git-clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: data
      params:
        - name: url
          value: $(params.url)
        - name: revision
          value: $(params.ref)

    - name: generate
      taskRef:
        name: generate-jupyterbook
      runAfter:
        - git-clone
      workspaces:
        - name: data
          workspace: data

    - name: buildah
      taskRef:
        name: buildah
      runAfter:
        - generate
      workspaces:
        - name: data
          workspace: data
      params:
        - name: IMAGE
          value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(context.pipelineRun.name)
        - name: BASE_IMAGE
          value: quay.io/centos7/httpd-24-centos7:latest

    - name: resolve-owner-reference
      taskRef:
        name: resolve-owner-reference
      params:
        - name: ownerReferences
          value: $(params.ownerReferences)
        - name: namespace
          value: $(context.pipelineRun.namespace)

    - name: deploy
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - buildah
        - resolve-owner-reference
      params:
        - name: SCRIPT
          value: |
            cat <<EOM | oc apply -f -
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: $(context.pipelineRun.name)
              labels:
                app: $(context.pipelineRun.name)
            spec:
              selector:
                matchLabels:
                  app: $(context.pipelineRun.name)
              replicas: 1
              template:
                metadata:
                  labels:
                    app: $(context.pipelineRun.name)
                spec:
                  containers:
                    - name: $(context.pipelineRun.name)
                      image: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(context.pipelineRun.name)
                      resources:
                        limits:
                          cpu: 100m
                          memory: 100Mi
                      env:
                        - name: GA_TRACKING_ID
                          value: $(params.googleAnalyticsToken)
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: $(context.pipelineRun.name)
            spec:
              selector:
                app: $(context.pipelineRun.name)
              ports:
                - name: http
                  protocol: TCP
                  port: 8080
                  targetPort: 8080
            ---
            apiVersion: route.openshift.io/v1
            kind: Route
            metadata:
              name: $(context.pipelineRun.name)
            spec:
              to:
                kind: Service
                name: $(context.pipelineRun.name)
              port:
                targetPort: http
            ---
            kind: ImageStream
            apiVersion: image.openshift.io/v1
            metadata:
              name: $(context.pipelineRun.name)
            EOM

            oc patch deployment/$(context.pipelineRun.name) --type='merge' -p='$(tasks.resolve-owner-reference.results.patch)'
            oc patch service/$(context.pipelineRun.name) --type='merge' -p='$(tasks.resolve-owner-reference.results.patch)'
            oc patch route/$(context.pipelineRun.name) --type='merge' -p='$(tasks.resolve-owner-reference.results.patch)'
            oc patch imagestream/$(context.pipelineRun.name) --type='merge' -p='$(tasks.resolve-owner-reference.results.patch)'
            oc wait --for=condition=available --timeout=600s deployment/$(context.pipelineRun.name)

    - name: url-to-results
      taskRef:
        name: oc-actions
      runAfter:
        - deploy
      params:
        - name: script
          value: |
            echo "http://$(oc get route $(context.pipelineRun.name) --template='{{ .spec.host }}')" > $(results.results.path)

  finally:
    - name: push-metrics
      taskRef:
        name: send-metrics
      workspaces:
        - name: data
          workspace: data
      params:
        - name: pipeline
          value: $(context.pipeline.name)
        - name: pipelineRun
          value: $(context.pipelineRun.name)
